enum Option<T> {
    None,
    Some T,
}

let from = fn x -> x << @(from (x+1))

let nats = from 0

let when = fn pred xs ->
  match xs with {
    x << xs => 
      if !#pred x then
        Some(from 0) << @(when pred !@xs)
      else 
        (None) << @(when pred !@xs)
  }

let switch = fn xs es -> 
  match (xs, es) with {
    (x << xs, e << es) => match e with {
      None => x << @(switch !@xs !@es),
      Some (a << as) => a << @(switch !@as !@es)
    }
  }

let loop_10 = switch nats (when #(fn x -> x % 10 == 0) nats)

let print_int_str = fn xs -> 
  match xs with {
    x << xs => (print_int x) << @(print_int_str !@xs)
  }

let print_loop_10 = print_int_str loop_10

let head = fn stream -> 
  match stream with {
    x << xs => x
  }

let print_contains = {
  let contains = fn xs v -> 
    match xs with {
      [] => false,
      x::xs => 
        if v == x then
          true
        else 
          contains xs v
    };
  (if contains [0,1,2,3,4] (head loop_10) then print_int (head loop_10) else ()) << @print_contains
}
  
