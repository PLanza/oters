use std::stream::head

let reset_btn = (button ((447, 300), "RESET")) << @reset_btn
let start_btn = {
  let aux = fn toggle -> {
    let label = if toggle then "STOP" else "START";
    let is_pressed = (button ((288, 300), label));
    if head reset_btn then
      is_pressed << @(aux false)
    else 
      is_pressed << @(aux (is_pressed && !toggle || !is_pressed && toggle))
  };
  aux false
}

enum State {
  Reset,
  Started,
  Stopped
}

let state = {
  let aux = fn curr -> 
    if head start_btn then
      match curr with {
        State::Reset => curr << @(aux (State::Started)),
        State::Started => curr << @(aux (State::Stopped)),
        State::Stopped => curr << @(aux (State::Started)),
      }
    else 
      if head reset_btn then 
        curr << @(aux (State::Reset))
      else 
        curr << @(aux curr)
  ;
  aux (State::Reset)
}

let secs_since_start = fn _ -> floor (gui::time::time_since_start ()) 

let stopwatch = {
  let aux = fn prev_state click_time base_time -> {
    let curr_state = head state;    
    match (prev_state, curr_state) with {
      (State::Reset, State::Reset) => 0 << @(aux curr_state 0 0),
      (State::Started, State::Reset) => (base_time + secs_since_start () - click_time) << @(aux curr_state 0 0),
      (State::Stopped, State::Reset) => base_time << @(aux curr_state 0 0),
      (State::Started, State::Started) => (base_time + secs_since_start () - click_time) << @(aux curr_state click_time base_time),
      (_, State::Started) => base_time << @(aux curr_state (secs_since_start()) base_time),
      (State::Started, State::Stopped) => (base_time + secs_since_start () - click_time) << @(aux curr_state click_time (base_time + secs_since_start() - click_time)),
      (State::Stopped, State::Stopped) => base_time << @(aux curr_state click_time base_time),
    }
  };
  aux (State::Reset) 0 0
}

let seconds = (head stopwatch % 60) << @seconds
let minutes = (head seconds / 60 % 3600) << @minutes
let hours = (head seconds / 3600) << @hours

let time_label = gui::text::draw_text (
    (time_to_string ((head hours), (head minutes), (head seconds))), 
    (200, 250), 
    72, 
    gui::Color {r: 0, g: 0, b: 0, a: 255 }
  ) << @time_label

